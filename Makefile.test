MAKE_VERSION_REQUIRED := 3.81

ifneq ($(MAKE_VERSION_REQUIRED),$(firstword $(sort $(MAKE_VERSION) $(MAKE_VERSION_REQUIRED))))
$(error You shall use make $(MAKE_VERSION) or higher)
endif

ifeq ($(OS),Windows_NT)
    HOST = win32
else
    ifeq ($(shell uname -s),Linux)
    HOST = linux
    else
    $(error Unrecognized host operating system)
    endif
endif

ifeq ($(MAKECMDGOALS),)
MAKECMDGOALS = all
endif

ifdef TEST_CODE
include $(TEST_CODE)/test.mk
endif

include config/host-$(HOST).mk
include config/config.mk
-include config-user.mk

TARGET := x86-64
COMPILER := gcc

3RDPARTY_DIR:= 3rdparty
FRAMEWORK_DIR := framework
MOCKS_DIR:= mocks
DRIVERS_DIR:= drivers
MODULES_DIR:= modules

include projects/$(PROJECT)/version.mk

include projects/$(PROJECT)/framework.mk

FRAMEWORK_EXPORTS := $(patsubst %,$(FRAMEWORK_DIR)/%/exports.mk,$(USED_FRAMEWORK))

include projects/$(PROJECT)/3rdparty.mk

3RDPARTYS_EXPORTS :=$(patsubst %,$(3RDPARTY_DIR)/%/exports.mk,$(USED_3RDPARTY))

include projects/$(PROJECT)/mocks.mk

MOCKS_EXPORTS :=$(patsubst %,$(MOCKS_DIR)/%/exports.mk,$(USED_MOCKS))

include projects/$(PROJECT)/drivers.mk

DRIVERS_EXPORTS :=$(patsubst %,$(DRIVERS_DIR)/%/exports.mk,$(USED_DRIVERS))

include projects/$(PROJECT)/modules.mk

MODULES_EXPORTS :=$(patsubst %,$(MODULES_DIR)/%/exports.mk,$(USED_MODULES) $(MAIN_MODULE))

include $(3RDPARTYS_EXPORTS) $(FRAMEWORK_EXPORTS) $(MOCKS_EXPORTS) $(DRIVERS_EXPORTS) $(MODULES_EXPORTS)

TESTED_MODULES := $(TEST_CODE)

OUTPUT := $(PROJECT)-$(VERSION_MAJOR)_$(VERSION_MINOR)_$(VERSION_PATCH)

PROJECT_DIR := $(CURDIR)
BUILD_DIR := $(CURDIR)/.tests-$(OUTPUT)
BIN_DIR := $(BUILD_DIR)/bin
LIB_DIR := $(BUILD_DIR)/lib

PROJECT_DIR_FORMATED := $(subst /,$(DELIM),$(PROJECT_DIR))
BUILD_DIR_FORMATED := $(subst /,$(DELIM),$(BUILD_DIR))
BIN_DIR_FORMATED := $(subst /,$(DELIM),$(BIN_DIR))
LIB_DIR_FORMATED := $(subst /,$(DELIM),$(LIB_DIR))

include config/compiler-$(TARGET)-$(COMPILER).mk
include config/exports.mk

MAKEFLAGS:= -I$(CURDIR) -I$(CURDIR)/config -I$(CURDIR)/projects/$(PROJECT) -R

.PHONY: all clean $(FRAMEWORK_DIR)

all: banner done

done: mocks banner

mocks: $(BIN_DIR) $(LIB_DIR) $(FRAMEWORK_DIR)
	@echo Here I am $(MAKECMDGOALS)
	$(MAKE) -C $@ $(MAKECMDGOALS)

$(BIN_DIR):
	-$(MKDIR) $(BUILD_DIR_FORMATED)

$(LIB_DIR):
	-$(MKDIR) $(LIB_DIR_FORMATED)

$(FRAMEWORK_DIR):
	$(MAKE) -C $@ $(MAKECMDGOALS)

banner:
	@echo -------------------------------------------------------------------------------
	@echo May I the tests for you build ...
	@echo
	@echo         PROJECT: $(PROJECT)
	@echo    MAKECMDGOALS: $(MAKECMDGOALS)
	@echo       TARGET_OS: $(HOST)
	@echo -------------------------------------------------------------------------------

done:
	@echo -------------------------------------------------------------------------------
	@echo Through the Force the tests I performed.
	    @echo          OUTPUT: $(TEST_CODE)
	@echo May the Force be with you!!!
	@echo -------------------------------------------------------------------------------

clean:
	@echo ------------------------------------------------------------------------------
	@echo         Performing clean of $(PROJECT) ...
	-$(RM_DIR) $(BUILD_DIR_FORMATED) $(CMDQUIET)
	@echo         Done
	@echo ------------------------------------------------------------------------------
